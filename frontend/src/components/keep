import React, { useEffect, useState } from "react";
import axios from "axios";
import { toWords } from "number-to-words";

const Orders = () => {
    const [products, setProducts] = useState([]);
    const [sales, setSales] = useState([]);
    const [selectedId, setSelectedId] = useState("");
    const [cart, setCart] = useState([]);
    const [loading, setLoading] = useState(true);
    const [salesLoading, setSalesLoading] = useState(true);
    const [error, setError] = useState(null);
    const [salesError, setSalesError] = useState(null);
    const [showModal, setShowModal] = useState(false);
    const [viewModal, setViewModal] = useState(null);

    // Customer Info
    const [customerName, setCustomerName] = useState("");
    const [address, setAddress] = useState("");
    const [phone, setPhone] = useState("");
    const [gender, setGender] = useState("");
    const [saleDate, setSaleDate] = useState(new Date().toISOString().slice(0, 10));

    // Payment Info
    const [amountPaid, setAmountPaid] = useState("");
    const [page, setPage] = useState(1);
    const perPage = 10;

    const total = cart.reduce((sum, item) => sum + item.price * item.qty, 0);
    const balance = amountPaid ? Math.max(total - Number(amountPaid), 0) : total;
    const totalInWords = total > 0 ? `${toWords(total)} Naira Only` : "";

    // Fetch products
    useEffect(() => {
        const fetchProducts = async () => {
            try {
                setLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/products/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setProducts(response.data);
            } catch (err) {
                console.error("Error fetching products:", err);
                setError(`Failed to load products. ${err.response?.data?.detail || err.message}`);
            } finally {
                setLoading(false);
            }
        };

        fetchProducts();
    }, []);

    // Fetch sales list
    useEffect(() => {
        const fetchSales = async () => {
            try {
                setSalesLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setSales(response.data);
            } catch (err) {
                console.error("Error fetching sales:", err);
                setSalesError(`Failed to load sales list. ${err.response?.data?.detail || err.message}`);
            } finally {
                setSalesLoading(false);
            }
        };

        fetchSales();
    }, []);

    // Add to cart
    const handleAdd = () => {
        if (!selectedId) {
            alert("Please select a product first.");
            return;
        }
        const product = products.find((p) => p.id === parseInt(selectedId));
        if (!product) {
            alert("Product not found.");
            return;
        }

        const existing = cart.find((item) => item.id === product.id);
        if (existing) {
            if (existing.qty >= product.quantity) {
                alert(`You cannot add more than ${product.quantity} of ${product.name}`);
                return;
            }
            setCart(
                cart.map((item) =>
                    item.id === product.id ? { ...item, qty: item.qty + 1 } : item
                )
            );
        } else {
            if (product.quantity <= 0) {
                alert(`${product.name} is out of stock.`);
                return;
            }
            setCart([...cart, {
                ...product,
                qty: 1,
                price: product.selling_price || product.price
            }]);
        }
        setSelectedId(""); // Reset selection
    };

    // Change quantity
    const handleQtyChange = (id, newQty) => {
        if (newQty < 1) return;

        setCart(
            cart.map((item) => {
                if (item.id === id) {
                    if (newQty > item.quantity) {
                        alert(`Only ${item.quantity} available for ${item.name}`);
                        return item;
                    }
                    return { ...item, qty: newQty };
                }
                return item;
            })
        );
    };

    // Remove product
    const handleRemove = (id) => setCart(cart.filter((item) => item.id !== id));

    // Submit sale
    const handleSubmit = () => {
        if (!customerName.trim()) {
            alert("Please enter customer name.");
            return;
        }
        if (!phone.trim()) {
            alert("Please enter phone number.");
            return;
        }
        if (cart.length === 0) {
            alert("Cart is empty!");
            return;
        }
        setShowModal(true);
    };

    // Confirm sale - WORKING VERSION
    const confirmSale = async () => {
        try {
            const token = localStorage.getItem('token');

            // STEP 1: Create the sale first
            const saleData = {
                customer_name: customerName.trim(),
                address: address.trim() || "",
                phone: phone.trim(),
                gender: gender || "Male",
                date: saleDate,
                total: parseFloat(total),
                amount_paid: parseFloat(amountPaid) || 0,
                balance: parseFloat(balance),
            };

            console.log("🔄 Creating sale:", saleData);

            const saleResponse = await axios.post("http://127.0.0.1:8000/api/sales/sales/", saleData, {
                headers: {
                    'Authorization': `Token ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            const saleId = saleResponse.data.id;
            console.log("✅ Sale created with ID:", saleId);

            // STEP 2: Create sale items
            for (const item of cart) {
                const saleItemData = {
                    sale: saleId,
                    product: item.id,
                    qty: item.qty,
                    price: parseFloat(item.price),
                };

                console.log("🔄 Creating sale item:", saleItemData);

                await axios.post("http://127.0.0.1:8000/api/sales/sale-items/", saleItemData, {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                console.log(`✅ Sale item created for ${item.name}`);

                // STEP 3: Update product quantity
                const newQuantity = item.quantity - item.qty;
                await axios.patch(`http://127.0.0.1:8000/api/products/${item.id}/`, {
                    quantity: Math.max(0, newQuantity)
                }, {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                console.log(`✅ Product ${item.name} quantity updated to ${newQuantity}`);
            }

            alert("✅ Sale recorded successfully!");
            setShowModal(false);
            resetForm();
            await refreshData();

        } catch (err) {
            console.error("❌ Sale creation error:", err);
            console.error("Error details:", err.response?.data);

            let errorMessage = 'Unknown error occurred';
            if (err.response?.data) {
                if (typeof err.response.data === 'object') {
                    errorMessage = Object.entries(err.response.data)
                        .map(([key, value]) => `${key}: ${Array.isArray(value) ? value.join(', ') : value}`)
                        .join('\n');
                } else {
                    errorMessage = err.response.data;
                }
            } else {
                errorMessage = err.message;
            }

            alert(`Failed to create sale:\n${errorMessage}`);
        }
    };

    // Refresh data
    const refreshData = async () => {
        try {
            const token = localStorage.getItem('token');

            // Refresh products
            const productsResponse = await axios.get("http://127.0.0.1:8000/api/products/", {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            setProducts(productsResponse.data);

            // Refresh sales
            const salesResponse = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            setSales(salesResponse.data);

        } catch (err) {
            console.error("Error refreshing data:", err);
        }
    };

    // Reset form
    const resetForm = () => {
        setCart([]);
        setCustomerName("");
        setAddress("");
        setPhone("");
        setGender("");
        setAmountPaid("");
        setSaleDate(new Date().toISOString().slice(0, 10));
    };

    // Delete sale
    const handleDelete = async (id) => {
        if (!window.confirm("Are you sure you want to delete this sale?")) return;

        try {
            const token = localStorage.getItem('token');
            await axios.delete(`http://127.0.0.1:8000/api/sales/sales/${id}/`, {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            alert("Sale deleted successfully!");
            setSales(sales.filter((s) => s.id !== id));
        } catch (err) {
            console.error("Delete error:", err);
            alert(`Failed to delete sale: ${err.response?.data?.detail || err.message}`);
        }
    };

    const totalPages = Math.ceil(sales.length / perPage);
    const currentSales = sales.slice((page - 1) * perPage, page * perPage);

    if (loading) {
        return (
            <div className="p-6 w-full">
                <div className="flex justify-center items-center h-64">
                    <div className="text-lg text-gray-600">Loading products...</div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-6 w-full">
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <div className="flex items-center">
                        <span className="text-red-500 mr-3">⚠️</span>
                        <span className="text-red-700">{error}</span>
                    </div>
                    <button
                        onClick={() => window.location.reload()}
                        className="mt-3 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm"
                    >
                        Try Again
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="p-6 w-full">
            {/* Header */}
            <div className="mb-8">
                <h1 className="text-3xl font-bold text-gray-800">Sales Management</h1>
                <p className="text-gray-600 mt-2">Process sales and manage customer orders</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column - Sales Form */}
                <div className="space-y-6">
                    {/* Customer Details Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Customer Information</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Customer Name *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter customer name"
                                    value={customerName}
                                    onChange={(e) => setCustomerName(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Phone Number *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter phone number"
                                    value={phone}
                                    onChange={(e) => setPhone(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Address
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter address"
                                    value={address}
                                    onChange={(e) => setAddress(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Gender
                                </label>
                                <select
                                    value={gender}
                                    onChange={(e) => setGender(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                >
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                            <div className="md:col-span-2">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Sale Date
                                </label>
                                <input
                                    type="date"
                                    value={saleDate}
                                    onChange={(e) => setSaleDate(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                        </div>
                    </div>

                    {/* Product Selection Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Add Products</h3>
                        <div className="flex gap-3">
                            <select
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                value={selectedId}
                                onChange={(e) => setSelectedId(e.target.value)}
                            >
                                <option value="">Select Product</option>
                                {products.map((product) => (
                                    <option key={product.id} value={product.id}>
                                        {product.name} - ₦{Number(product.selling_price || product.price).toLocaleString()}
                                        (Stock: {product.quantity})
                                    </option>
                                ))}
                            </select>
                            <button
                                onClick={handleAdd}
                                className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                            >
                                Add
                            </button>
                        </div>
                    </div>

                    {/* Cart Card */}
                    {cart.length > 0 && (
                        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                            <div className="flex justify-between items-center mb-4">
                                <h3 className="text-xl font-semibold text-gray-800">Shopping Cart</h3>
                                <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                                    {cart.length} items
                                </span>
                            </div>

                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Product
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Price
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Quantity
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Action
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {cart.map((item) => (
                                            <tr key={item.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{item.name}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    ₦{Number(item.price).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex items-center gap-2">
                                                        <input
                                                            type="number"
                                                            min="1"
                                                            max={item.quantity}
                                                            value={item.qty}
                                                            onChange={(e) =>
                                                                handleQtyChange(item.id, parseInt(e.target.value) || 1)
                                                            }
                                                            className="w-20 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                        />
                                                        <span className="text-sm text-gray-500">
                                                            of {item.quantity}
                                                        </span>
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(item.price * item.qty).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <button
                                                        onClick={() => handleRemove(item.id)}
                                                        className="text-red-600 hover:text-red-800 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-sm"
                                                    >
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Cart Summary */}
                            <div className="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold text-gray-800">Total Amount:</span>
                                    <span className="text-2xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                                <div className="text-sm text-gray-600 italic">
                                    {totalInWords}
                                </div>
                                <button
                                    onClick={handleSubmit}
                                    className="w-full mt-4 px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-semibold text-lg"
                                >
                                    Process Sale
                                </button>
                            </div>
                        </div>
                    )}
                </div>

                {/* Right Column - Sales History */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div className="flex justify-between items-center mb-6">
                        <h3 className="text-xl font-semibold text-gray-800">Sales History</h3>
                        <span className="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm font-medium">
                            {sales.length} total sales
                        </span>
                    </div>

                    {salesError && (
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                            <div className="flex items-center">
                                <span className="text-red-500 mr-3">⚠️</span>
                                <span className="text-red-700">{salesError}</span>
                            </div>
                        </div>
                    )}

                    {salesLoading ? (
                        <div className="flex justify-center items-center h-32">
                            <div className="text-gray-600">Loading sales history...</div>
                        </div>
                    ) : (
                        <>
                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Customer
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Date
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Paid
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Balance
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Actions
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {currentSales.map((sale) => (
                                            <tr key={sale.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{sale.customer_name}</div>
                                                    <div className="text-sm text-gray-500">{sale.phone}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    {new Date(sale.date).toLocaleDateString()}
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(sale.total).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className="text-green-600 font-medium">
                                                        ₦{Number(sale.amount_paid).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className={`font-medium ${sale.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                                        ₦{Number(sale.balance).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex space-x-2">
                                                        <button
                                                            onClick={() => setViewModal(sale)}
                                                            className="text-blue-600 hover:text-blue-900 bg-blue-50 hover:bg-blue-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            View
                                                        </button>
                                                        <button
                                                            onClick={() => handleDelete(sale.id)}
                                                            className="text-red-600 hover:text-red-900 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            Delete
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Pagination */}
                            {totalPages > 1 && (
                                <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-200">
                                    <div className="text-sm text-gray-500">
                                        Showing {Math.min(currentSales.length, perPage)} of {sales.length} sales
                                    </div>
                                    <div className="flex gap-2">
                                        <button
                                            disabled={page === 1}
                                            onClick={() => setPage(page - 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Previous
                                        </button>
                                        <span className="px-3 py-1 bg-blue-500 text-white rounded-lg">
                                            {page}
                                        </span>
                                        <button
                                            disabled={page === totalPages}
                                            onClick={() => setPage(page + 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Next
                                        </button>
                                    </div>
                                </div>
                            )}

                            {sales.length === 0 && !salesLoading && (
                                <div className="text-center py-8">
                                    <div className="text-4xl mb-4">📊</div>
                                    <h3 className="text-lg font-semibold text-gray-900 mb-2">No Sales Yet</h3>
                                    <p className="text-gray-500">Start by creating your first sale using the form on the left.</p>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* Confirm Sale Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Confirm Sale</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{customerName}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{phone}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold">Total Amount:</span>
                                    <span className="text-xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Amount Paid
                                </label>
                                <input
                                    type="number"
                                    value={amountPaid}
                                    onChange={(e) => setAmountPaid(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="Enter amount paid"
                                    min="0"
                                    max={total}
                                />
                            </div>
                            {amountPaid && (
                                <div className={`border rounded-lg p-4 ${balance > 0 ? 'bg-orange-50 border-orange-200' : 'bg-green-50 border-green-200'}`}>
                                    <div className="flex justify-between items-center">
                                        <span className={`font-medium ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            {balance > 0 ? 'Balance Due:' : 'Fully Paid!'}
                                        </span>
                                        <span className={`text-lg font-bold ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            ₦{Number(balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="flex gap-3 p-6 border-t border-gray-200">
                            <button
                                onClick={() => setShowModal(false)}
                                className="flex-1 bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={confirmSale}
                                className="flex-1 bg-green-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-green-600 transition-colors"
                            >
                                Confirm Sale
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* View Sale Details Modal */}
            {viewModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Sale Details</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{viewModal.customer_name}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Date:</span>
                                    <p className="font-medium">{viewModal.date}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{viewModal.phone}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Gender:</span>
                                    <p className="font-medium">{viewModal.gender || 'N/A'}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="space-y-2">
                                    <div className="flex justify-between">
                                        <span>Total Amount:</span>
                                        <span className="font-semibold">₦{Number(viewModal.total).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Amount Paid:</span>
                                        <span className="text-green-600 font-semibold">₦{Number(viewModal.amount_paid).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Balance:</span>
                                        <span className={`font-semibold ${viewModal.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                            ₦{Number(viewModal.balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            </div>
                            {viewModal.items && viewModal.items.length > 0 && (
                                <div className="border-t pt-4">
                                    <h4 className="font-semibold mb-2">Items Sold:</h4>
                                    <div className="space-y-2 max-h-40 overflow-y-auto">
                                        {viewModal.items.map((item, index) => (
                                            <div key={index} className="flex justify-between text-sm">
                                                <span>{item.product_name || `Product ${item.product}`}</span>
                                                <span>{item.qty} × ₦{Number(item.price).toLocaleString()}</span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="p-6 border-t border-gray-200">
                            <button
                                onClick={() => setViewModal(null)}
                                className="w-full bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Orders;





import React, { useEffect, useState } from "react";
import axios from "axios";
import { toWords } from "number-to-words";

const Orders = () => {
    const [products, setProducts] = useState([]);
    const [sales, setSales] = useState([]);
    const [selectedId, setSelectedId] = useState("");
    const [cart, setCart] = useState([]);
    const [loading, setLoading] = useState(true);
    const [salesLoading, setSalesLoading] = useState(true);
    const [error, setError] = useState(null);
    const [salesError, setSalesError] = useState(null);
    const [showModal, setShowModal] = useState(false);
    const [viewModal, setViewModal] = useState(null);

    // Customer Info
    const [customerName, setCustomerName] = useState("");
    const [address, setAddress] = useState("");
    const [phone, setPhone] = useState("");
    const [gender, setGender] = useState("");
    const [saleDate, setSaleDate] = useState(new Date().toISOString().slice(0, 10));

    // Payment Info
    const [amountPaid, setAmountPaid] = useState("");
    const [paymentInput, setPaymentInput] = useState("");
    const [page, setPage] = useState(1);
    const perPage = 10;

    const total = cart.reduce((sum, item) => sum + item.price * item.qty, 0);
    const balance = amountPaid ? Math.max(total - Number(amountPaid), 0) : total;
    const totalInWords = total > 0 ? `${toWords(total)} Naira Only` : "";

    // Fetch products
    useEffect(() => {
        const fetchProducts = async () => {
            try {
                setLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/products/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setProducts(response.data);
            } catch (err) {
                console.error("Error fetching products:", err);
                setError(`Failed to load products. ${err.response?.data?.detail || err.message}`);
            } finally {
                setLoading(false);
            }
        };

        fetchProducts();
    }, []);

    // Fetch sales list
    useEffect(() => {
        const fetchSales = async () => {
            try {
                setSalesLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setSales(response.data);
            } catch (err) {
                console.error("Error fetching sales:", err);
                setSalesError(`Failed to load sales list. ${err.response?.data?.detail || err.message}`);
            } finally {
                setSalesLoading(false);
            }
        };

        fetchSales();
    }, []);

    // Add to cart
    const handleAdd = () => {
        if (!selectedId) {
            alert("Please select a product first.");
            return;
        }
        const product = products.find((p) => p.id === parseInt(selectedId));
        if (!product) {
            alert("Product not found.");
            return;
        }

        const existing = cart.find((item) => item.id === product.id);
        if (existing) {
            if (existing.qty >= product.quantity) {
                alert(`You cannot add more than ${product.quantity} of ${product.name}`);
                return;
            }
            setCart(
                cart.map((item) =>
                    item.id === product.id ? { ...item, qty: item.qty + 1 } : item
                )
            );
        } else {
            if (product.quantity <= 0) {
                alert(`${product.name} is out of stock.`);
                return;
            }
            setCart([...cart, {
                ...product,
                qty: 1,
                price: product.selling_price || product.price
            }]);
        }
        setSelectedId(""); // Reset selection
    };

    // Change quantity
    const handleQtyChange = (id, newQty) => {
        if (newQty < 1) return;

        setCart(
            cart.map((item) => {
                if (item.id === id) {
                    if (newQty > item.quantity) {
                        alert(`Only ${item.quantity} available for ${item.name}`);
                        return item;
                    }
                    return { ...item, qty: newQty };
                }
                return item;
            })
        );
    };

    // Remove product
    const handleRemove = (id) => setCart(cart.filter((item) => item.id !== id));

    // Submit sale
    const handleSubmit = () => {
        if (!customerName.trim()) {
            alert("Please enter customer name.");
            return;
        }
        if (!phone.trim()) {
            alert("Please enter phone number.");
            return;
        }
        if (cart.length === 0) {
            alert("Cart is empty!");
            return;
        }
        setShowModal(true);
    };

    // Confirm sale - WORKING VERSION
    // DEBUG VERSION - Replace your confirmSale function with this
    const confirmSale = async () => {
        try {
            const token = localStorage.getItem('token');

            // STEP 1: Create the sale first without items
            const saleData = {
                customer_name: customerName.trim(),
                address: address.trim() || "",
                phone: phone.trim(),
                gender: gender || "Male",
                date: saleDate,
                total: parseFloat(total),
                amount_paid: parseFloat(amountPaid) || 0,
                balance: parseFloat(balance),
            };

            console.log("🔄 Creating sale:", JSON.stringify(saleData, null, 2));

            const saleResponse = await axios.post("http://127.0.0.1:8000/api/sales/sales/", saleData, {
                headers: {
                    'Authorization': `Token ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log("✅ Sale created successfully:", saleResponse.data);

            // If we get here, the sale was created successfully
            const saleId = saleResponse.data.id;

            // STEP 2: Create sale items separately
            for (const item of cart) {
                const saleItemData = {
                    sale: saleId,
                    product: item.id,
                    qty: item.qty,
                    price: parseFloat(item.price),
                };

                console.log("🔄 Creating sale item:", saleItemData);

                await axios.post("http://127.0.0.1:8000/api/sales/sale-items/", saleItemData, {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                // STEP 3: Update product quantity
                const newQuantity = item.quantity - item.qty;
                await axios.patch(`http://127.0.0.1:8000/api/products/${item.id}/`, {
                    quantity: Math.max(0, newQuantity)
                }, {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
            }

            alert("✅ Sale recorded successfully!");
            setShowModal(false);
            resetForm();
            await refreshData();

        } catch (err) {
            console.error("❌ FULL ERROR:", err);
            console.error("❌ Error response:", err.response?.data);

            if (err.response?.data) {
                // Show the exact validation errors
                let errorMessage = "Field Validation Errors:\n\n";

                if (typeof err.response.data === 'object') {
                    Object.entries(err.response.data).forEach(([field, errors]) => {
                        errorMessage += `• ${field}: ${Array.isArray(errors) ? errors.join(', ') : errors}\n`;
                    });
                } else {
                    errorMessage = err.response.data;
                }

                alert(errorMessage);
            } else {
                alert(`Error: ${err.message}`);
            }
        }
    };

    // Refresh data
    const refreshData = async () => {
        try {
            const token = localStorage.getItem('token');

            // Refresh products
            const productsResponse = await axios.get("http://127.0.0.1:8000/api/products/", {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            setProducts(productsResponse.data);

            // Refresh sales
            const salesResponse = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            setSales(salesResponse.data);

        } catch (err) {
            console.error("Error refreshing data:", err);
        }
    };

    // Reset form
    const resetForm = () => {
        setCart([]);
        setCustomerName("");
        setAddress("");
        setPhone("");
        setGender("");
        setAmountPaid("");
        setSaleDate(new Date().toISOString().slice(0, 10));
    };

    // Delete sale
    const handleDelete = async (id) => {
        if (!window.confirm("Are you sure you want to delete this sale?")) return;

        try {
            const token = localStorage.getItem('token');
            await axios.delete(`http://127.0.0.1:8000/api/sales/sales/${id}/`, {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            alert("Sale deleted successfully!");
            setSales(sales.filter((s) => s.id !== id));
        } catch (err) {
            console.error("Delete error:", err);
            alert(`Failed to delete sale: ${err.response?.data?.detail || err.message}`);
        }
    };

    // Update Payment
    const handleUpdatePayment = async (saleId) => {
        if (!paymentInput || isNaN(paymentInput)) {
            alert("Please enter a valid amount.");
            return;
        }

        try {
            const token = localStorage.getItem('token');
            const saleRes = await axios.get(`http://127.0.0.1:8000/api/sales/sales/${saleId}/`, {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            const sale = saleRes.data;

            const newAmountPaid = Number(sale.amount_paid) + Number(paymentInput);
            const newBalance = Math.max(Number(sale.total) - newAmountPaid, 0);

            const updatedSale = {
                ...sale,
                amount_paid: newAmountPaid,
                balance: newBalance,
            };

            const response = await axios.put(
                `http://127.0.0.1:8000/api/sales/sales/${saleId}/`,
                updatedSale,
                {
                    headers: {
                        'Authorization': `Token ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            alert("Payment updated successfully!");
            setSales((prev) => prev.map((s) => (s.id === saleId ? response.data : s)));
            setViewModal(null);
            setPaymentInput("");
        } catch (err) {
            console.error("Update error:", err);
            alert("Failed to update payment. Please check your API and try again.");
        }
    };

    const totalPages = Math.ceil(sales.length / perPage);
    const currentSales = sales.slice((page - 1) * perPage, page * perPage);

    if (loading) {
        return (
            <div className="p-6 w-full">
                <div className="flex justify-center items-center h-64">
                    <div className="text-lg text-gray-600">Loading products...</div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-6 w-full">
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <div className="flex items-center">
                        <span className="text-red-500 mr-3">⚠️</span>
                        <span className="text-red-700">{error}</span>
                    </div>
                    <button
                        onClick={() => window.location.reload()}
                        className="mt-3 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm"
                    >
                        Try Again
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="p-6 w-full">
            {/* Header */}
            <div className="mb-8">
                <h1 className="text-3xl font-bold text-gray-800">Sales Management</h1>
                <p className="text-gray-600 mt-2">Process sales and manage customer orders</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column - Sales Form */}
                <div className="space-y-6">
                    {/* Customer Details Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Customer Information</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Customer Name *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter customer name"
                                    value={customerName}
                                    onChange={(e) => setCustomerName(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Phone Number *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter phone number"
                                    value={phone}
                                    onChange={(e) => setPhone(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Address
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter address"
                                    value={address}
                                    onChange={(e) => setAddress(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Gender
                                </label>
                                <select
                                    value={gender}
                                    onChange={(e) => setGender(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                >
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                            <div className="md:col-span-2">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Sale Date
                                </label>
                                <input
                                    type="date"
                                    value={saleDate}
                                    onChange={(e) => setSaleDate(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                        </div>
                    </div>

                    {/* Product Selection Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Add Products</h3>
                        <div className="flex gap-3">
                            <select
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                value={selectedId}
                                onChange={(e) => setSelectedId(e.target.value)}
                            >
                                <option value="">Select Product</option>
                                {products.map((product) => (
                                    <option key={product.id} value={product.id}>
                                        {product.name} - ₦{Number(product.selling_price || product.price).toLocaleString()}
                                        (Stock: {product.quantity})
                                    </option>
                                ))}
                            </select>
                            <button
                                onClick={handleAdd}
                                className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                            >
                                Add
                            </button>
                        </div>
                    </div>

                    {/* Cart Card */}
                    {cart.length > 0 && (
                        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                            <div className="flex justify-between items-center mb-4">
                                <h3 className="text-xl font-semibold text-gray-800">Shopping Cart</h3>
                                <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                                    {cart.length} items
                                </span>
                            </div>

                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Product
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Price
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Quantity
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Action
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {cart.map((item) => (
                                            <tr key={item.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{item.name}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    ₦{Number(item.price).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex items-center gap-2">
                                                        <input
                                                            type="number"
                                                            min="1"
                                                            max={item.quantity}
                                                            value={item.qty}
                                                            onChange={(e) =>
                                                                handleQtyChange(item.id, parseInt(e.target.value) || 1)
                                                            }
                                                            className="w-20 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                        />
                                                        <span className="text-sm text-gray-500">
                                                            of {item.quantity}
                                                        </span>
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(item.price * item.qty).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <button
                                                        onClick={() => handleRemove(item.id)}
                                                        className="text-red-600 hover:text-red-800 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-sm"
                                                    >
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Cart Summary */}
                            <div className="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold text-gray-800">Total Amount:</span>
                                    <span className="text-2xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                                <div className="text-sm text-gray-600 italic">
                                    {totalInWords}
                                </div>
                                <button
                                    onClick={handleSubmit}
                                    className="w-full mt-4 px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-semibold text-lg"
                                >
                                    Process Sale
                                </button>
                            </div>
                        </div>
                    )}
                </div>

                {/* Right Column - Sales History */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div className="flex justify-between items-center mb-6">
                        <h3 className="text-xl font-semibold text-gray-800">Sales History</h3>
                        <span className="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm font-medium">
                            {sales.length} total sales
                        </span>
                    </div>

                    {salesError && (
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                            <div className="flex items-center">
                                <span className="text-red-500 mr-3">⚠️</span>
                                <span className="text-red-700">{salesError}</span>
                            </div>
                        </div>
                    )}

                    {salesLoading ? (
                        <div className="flex justify-center items-center h-32">
                            <div className="text-gray-600">Loading sales history...</div>
                        </div>
                    ) : (
                        <>
                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Customer
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Date
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Paid
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Balance
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Actions
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {currentSales.map((sale) => (
                                            <tr key={sale.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{sale.customer_name}</div>
                                                    <div className="text-sm text-gray-500">{sale.phone}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    {new Date(sale.date).toLocaleDateString()}
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(sale.total).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className="text-green-600 font-medium">
                                                        ₦{Number(sale.amount_paid).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className={`font-medium ${sale.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                                        ₦{Number(sale.balance).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex space-x-2">
                                                        <button
                                                            onClick={() => setViewModal(sale)}
                                                            className="text-blue-600 hover:text-blue-900 bg-blue-50 hover:bg-blue-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            View
                                                        </button>
                                                        <button
                                                            onClick={() => handleDelete(sale.id)}
                                                            className="text-red-600 hover:text-red-900 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            Delete
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Pagination */}
                            {totalPages > 1 && (
                                <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-200">
                                    <div className="text-sm text-gray-500">
                                        Showing {Math.min(currentSales.length, perPage)} of {sales.length} sales
                                    </div>
                                    <div className="flex gap-2">
                                        <button
                                            disabled={page === 1}
                                            onClick={() => setPage(page - 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Previous
                                        </button>
                                        <span className="px-3 py-1 bg-blue-500 text-white rounded-lg">
                                            {page}
                                        </span>
                                        <button
                                            disabled={page === totalPages}
                                            onClick={() => setPage(page + 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Next
                                        </button>
                                    </div>
                                </div>
                            )}

                            {sales.length === 0 && !salesLoading && (
                                <div className="text-center py-8">
                                    <div className="text-4xl mb-4">📊</div>
                                    <h3 className="text-lg font-semibold text-gray-900 mb-2">No Sales Yet</h3>
                                    <p className="text-gray-500">Start by creating your first sale using the form on the left.</p>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* Confirm Sale Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Confirm Sale</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{customerName}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{phone}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold">Total Amount:</span>
                                    <span className="text-xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Amount Paid
                                </label>
                                <input
                                    type="number"
                                    value={amountPaid}
                                    onChange={(e) => setAmountPaid(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="Enter amount paid"
                                    min="0"
                                    max={total}
                                />
                            </div>
                            {amountPaid && (
                                <div className={`border rounded-lg p-4 ${balance > 0 ? 'bg-orange-50 border-orange-200' : 'bg-green-50 border-green-200'}`}>
                                    <div className="flex justify-between items-center">
                                        <span className={`font-medium ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            {balance > 0 ? 'Balance Due:' : 'Fully Paid!'}
                                        </span>
                                        <span className={`text-lg font-bold ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            ₦{Number(balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="flex gap-3 p-6 border-t border-gray-200">
                            <button
                                onClick={() => setShowModal(false)}
                                className="flex-1 bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={confirmSale}
                                className="flex-1 bg-green-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-green-600 transition-colors"
                            >
                                Confirm Sale
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* View Sale Details Modal with Payment Update */}
            {viewModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Sale Details</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{viewModal.customer_name}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Date:</span>
                                    <p className="font-medium">{viewModal.date}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{viewModal.phone}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Gender:</span>
                                    <p className="font-medium">{viewModal.gender || 'N/A'}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="space-y-2">
                                    <div className="flex justify-between">
                                        <span>Total Amount:</span>
                                        <span className="font-semibold">₦{Number(viewModal.total).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Amount Paid:</span>
                                        <span className="text-green-600 font-semibold">₦{Number(viewModal.amount_paid).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Balance:</span>
                                        <span className={`font-semibold ${viewModal.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                            ₦{Number(viewModal.balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            </div>

                            {/* Payment Update Section */}
                            <div className="border-t pt-4">
                                <h4 className="font-semibold mb-3">Update Payment</h4>
                                <div className="space-y-3">
                                    <input
                                        type="number"
                                        placeholder="Enter additional payment amount"
                                        value={paymentInput}
                                        onChange={(e) => setPaymentInput(e.target.value)}
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                    <button
                                        onClick={() => handleUpdatePayment(viewModal.id)}
                                        className="w-full bg-green-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-green-600 transition-colors"
                                    >
                                        Add Payment
                                    </button>
                                </div>
                            </div>

                            {viewModal.items && viewModal.items.length > 0 && (
                                <div className="border-t pt-4">
                                    <h4 className="font-semibold mb-2">Items Sold:</h4>
                                    <div className="space-y-2 max-h-40 overflow-y-auto">
                                        {viewModal.items.map((item, index) => (
                                            <div key={index} className="flex justify-between text-sm">
                                                <span>{item.product_name || `Product ${item.product}`}</span>
                                                <span>{item.qty} × ₦{Number(item.price).toLocaleString()}</span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="p-6 border-t border-gray-200">
                            <button
                                onClick={() => {
                                    setViewModal(null);
                                    setPaymentInput("");
                                }}
                                className="w-full bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Orders;

working fine 

import React, { useEffect, useState } from "react";
import axios from "axios";
import { toWords } from "number-to-words";

const Orders = () => {
    const [products, setProducts] = useState([]);
    const [sales, setSales] = useState([]);
    const [selectedId, setSelectedId] = useState("");
    const [cart, setCart] = useState([]);
    const [loading, setLoading] = useState(true);
    const [salesLoading, setSalesLoading] = useState(true);
    const [error, setError] = useState(null);
    const [salesError, setSalesError] = useState(null);
    const [showModal, setShowModal] = useState(false);
    const [viewModal, setViewModal] = useState(null);

    // Customer Info
    const [customerName, setCustomerName] = useState("");
    const [address, setAddress] = useState("");
    const [phone, setPhone] = useState("");
    const [gender, setGender] = useState("");
    const [saleDate, setSaleDate] = useState(new Date().toISOString().slice(0, 10));

    // Payment Info
    const [amountPaid, setAmountPaid] = useState("");
    const [page, setPage] = useState(1);
    const perPage = 10;

    const total = cart.reduce((sum, item) => sum + item.price * item.qty, 0);
    const balance = amountPaid ? Math.max(total - Number(amountPaid), 0) : total;
    const totalInWords = total > 0 ? `${toWords(total)} Naira Only` : "";

    // Fetch products
    useEffect(() => {
        const fetchProducts = async () => {
            try {
                setLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/products/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setProducts(response.data);
            } catch (err) {
                console.error("Error fetching products:", err);
                setError(`Failed to load products. ${err.response?.data?.detail || err.message}`);
            } finally {
                setLoading(false);
            }
        };

        fetchProducts();
    }, []);

    // Fetch sales list
    useEffect(() => {
        const fetchSales = async () => {
            try {
                setSalesLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setSales(response.data);
            } catch (err) {
                console.error("Error fetching sales:", err);
                setSalesError(`Failed to load sales list. ${err.response?.data?.detail || err.message}`);
            } finally {
                setSalesLoading(false);
            }
        };

        fetchSales();
    }, []);

    // Add to cart
    const handleAdd = () => {
        if (!selectedId) {
            alert("Please select a product first.");
            return;
        }
        const product = products.find((p) => p.id === parseInt(selectedId));
        if (!product) {
            alert("Product not found.");
            return;
        }

        const existing = cart.find((item) => item.id === product.id);
        if (existing) {
            if (existing.qty >= product.quantity) {
                alert(`You cannot add more than ${product.quantity} of ${product.name}`);
                return;
            }
            setCart(
                cart.map((item) =>
                    item.id === product.id ? { ...item, qty: item.qty + 1 } : item
                )
            );
        } else {
            if (product.quantity <= 0) {
                alert(`${product.name} is out of stock.`);
                return;
            }
            setCart([...cart, {
                ...product,
                qty: 1,
                price: product.selling_price || product.price
            }]);
        }
        setSelectedId(""); // Reset selection
    };

    // Change quantity
    const handleQtyChange = (id, newQty) => {
        if (newQty < 1) return;

        setCart(
            cart.map((item) => {
                if (item.id === id) {
                    if (newQty > item.quantity) {
                        alert(`Only ${item.quantity} available for ${item.name}`);
                        return item;
                    }
                    return { ...item, qty: newQty };
                }
                return item;
            })
        );
    };

    // Remove product
    const handleRemove = (id) => setCart(cart.filter((item) => item.id !== id));

    // Submit sale
    const handleSubmit = () => {
        if (!customerName.trim()) {
            alert("Please enter customer name.");
            return;
        }
        if (!phone.trim()) {
            alert("Please enter phone number.");
            return;
        }
        if (cart.length === 0) {
            alert("Cart is empty!");
            return;
        }
        setShowModal(true);
    };

    // Confirm sale
    const confirmSale = async () => {
        try {
            const token = localStorage.getItem('token');
            const saleData = {
                customer_name: customerName,
                address: address || "Not provided",
                phone,
                gender: gender || "Not specified",
                date: saleDate,
                total: parseFloat(total),
                amount_paid: Number(amountPaid) || 0,
                balance: parseFloat(balance),
                items: cart.map((item) => ({
                    product: item.id,
                    quantity: item.qty,
                    price: parseFloat(item.price),
                })),
            };

            console.log("Submitting sale:", saleData);

            const response = await axios.post("http://127.0.0.1:8000/api/sales/sales/", saleData, {
                headers: {
                    'Authorization': `Token ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            alert("Sale recorded successfully!");
            setShowModal(false);
            setCart([]);
            setCustomerName("");
            setAddress("");
            setPhone("");
            setGender("");
            setAmountPaid("");
            setSaleDate(new Date().toISOString().slice(0, 10));

            // Refresh sales list
            const salesResponse = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            setSales(salesResponse.data);

        } catch (err) {
            console.error("Sale creation error:", err);
            alert(`Failed to create sale: ${err.response?.data?.detail || err.message || 'Unknown error'}`);
        }
    };

    // Delete sale
    const handleDelete = async (id) => {
        if (!window.confirm("Are you sure you want to delete this sale?")) return;

        try {
            const token = localStorage.getItem('token');
            await axios.delete(`http://127.0.0.1:8000/api/sales/sales/${id}/`, {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            alert("Sale deleted successfully!");
            setSales(sales.filter((s) => s.id !== id));
        } catch (err) {
            console.error("Delete error:", err);
            alert(`Failed to delete sale: ${err.response?.data?.detail || err.message}`);
        }
    };

    const totalPages = Math.ceil(sales.length / perPage);
    const currentSales = sales.slice((page - 1) * perPage, page * perPage);

    if (loading) {
        return (
            <div className="p-6 w-full">
                <div className="flex justify-center items-center h-64">
                    <div className="text-lg text-gray-600">Loading products...</div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-6 w-full">
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <div className="flex items-center">
                        <span className="text-red-500 mr-3">⚠️</span>
                        <span className="text-red-700">{error}</span>
                    </div>
                    <button
                        onClick={() => window.location.reload()}
                        className="mt-3 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm"
                    >
                        Try Again
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="p-6 w-full">
            {/* Header */}
            <div className="mb-8">
                <h1 className="text-3xl font-bold text-gray-800">Sales Management</h1>
                <p className="text-gray-600 mt-2">Process sales and manage customer orders</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column - Sales Form */}
                <div className="space-y-6">
                    {/* Customer Details Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Customer Information</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Customer Name *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter customer name"
                                    value={customerName}
                                    onChange={(e) => setCustomerName(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Phone Number *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter phone number"
                                    value={phone}
                                    onChange={(e) => setPhone(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Address
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter address"
                                    value={address}
                                    onChange={(e) => setAddress(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Gender
                                </label>
                                <select
                                    value={gender}
                                    onChange={(e) => setGender(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                >
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                            <div className="md:col-span-2">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Sale Date
                                </label>
                                <input
                                    type="date"
                                    value={saleDate}
                                    onChange={(e) => setSaleDate(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                        </div>
                    </div>

                    {/* Product Selection Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Add Products</h3>
                        <div className="flex gap-3">
                            <select
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                value={selectedId}
                                onChange={(e) => setSelectedId(e.target.value)}
                            >
                                <option value="">Select Product</option>
                                {products.map((product) => (
                                    <option key={product.id} value={product.id}>
                                        {product.name} - ₦{Number(product.selling_price || product.price).toLocaleString()}
                                        (Stock: {product.quantity})
                                    </option>
                                ))}
                            </select>
                            <button
                                onClick={handleAdd}
                                className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                            >
                                Add
                            </button>
                        </div>
                    </div>

                    {/* Cart Card */}
                    {cart.length > 0 && (
                        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                            <div className="flex justify-between items-center mb-4">
                                <h3 className="text-xl font-semibold text-gray-800">Shopping Cart</h3>
                                <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                                    {cart.length} items
                                </span>
                            </div>

                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Product
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Price
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Quantity
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Action
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {cart.map((item) => (
                                            <tr key={item.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{item.name}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    ₦{Number(item.price).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex items-center gap-2">
                                                        <input
                                                            type="number"
                                                            min="1"
                                                            max={item.quantity}
                                                            value={item.qty}
                                                            onChange={(e) =>
                                                                handleQtyChange(item.id, parseInt(e.target.value) || 1)
                                                            }
                                                            className="w-20 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                        />
                                                        <span className="text-sm text-gray-500">
                                                            of {item.quantity}
                                                        </span>
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(item.price * item.qty).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <button
                                                        onClick={() => handleRemove(item.id)}
                                                        className="text-red-600 hover:text-red-800 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-sm"
                                                    >
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Cart Summary */}
                            <div className="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold text-gray-800">Total Amount:</span>
                                    <span className="text-2xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                                <div className="text-sm text-gray-600 italic">
                                    {totalInWords}
                                </div>
                                <button
                                    onClick={handleSubmit}
                                    className="w-full mt-4 px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-semibold text-lg"
                                >
                                    Process Sale
                                </button>
                            </div>
                        </div>
                    )}
                </div>

                {/* Right Column - Sales History */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div className="flex justify-between items-center mb-6">
                        <h3 className="text-xl font-semibold text-gray-800">Sales History</h3>
                        <span className="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm font-medium">
                            {sales.length} total sales
                        </span>
                    </div>

                    {salesError && (
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                            <div className="flex items-center">
                                <span className="text-red-500 mr-3">⚠️</span>
                                <span className="text-red-700">{salesError}</span>
                            </div>
                        </div>
                    )}

                    {salesLoading ? (
                        <div className="flex justify-center items-center h-32">
                            <div className="text-gray-600">Loading sales history...</div>
                        </div>
                    ) : (
                        <>
                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Customer
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Date
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Paid
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Balance
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Actions
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {currentSales.map((sale) => (
                                            <tr key={sale.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{sale.customer_name}</div>
                                                    <div className="text-sm text-gray-500">{sale.phone}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    {new Date(sale.date).toLocaleDateString()}
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(sale.total).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className="text-green-600 font-medium">
                                                        ₦{Number(sale.amount_paid).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className={`font-medium ${sale.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                                        ₦{Number(sale.balance).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex space-x-2">
                                                        <button
                                                            onClick={() => setViewModal(sale)}
                                                            className="text-blue-600 hover:text-blue-900 bg-blue-50 hover:bg-blue-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            View
                                                        </button>
                                                        <button
                                                            onClick={() => handleDelete(sale.id)}
                                                            className="text-red-600 hover:text-red-900 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            Delete
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Pagination */}
                            {totalPages > 1 && (
                                <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-200">
                                    <div className="text-sm text-gray-500">
                                        Showing {Math.min(currentSales.length, perPage)} of {sales.length} sales
                                    </div>
                                    <div className="flex gap-2">
                                        <button
                                            disabled={page === 1}
                                            onClick={() => setPage(page - 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Previous
                                        </button>
                                        <span className="px-3 py-1 bg-blue-500 text-white rounded-lg">
                                            {page}
                                        </span>
                                        <button
                                            disabled={page === totalPages}
                                            onClick={() => setPage(page + 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Next
                                        </button>
                                    </div>
                                </div>
                            )}

                            {sales.length === 0 && !salesLoading && (
                                <div className="text-center py-8">
                                    <div className="text-4xl mb-4">📊</div>
                                    <h3 className="text-lg font-semibold text-gray-900 mb-2">No Sales Yet</h3>
                                    <p className="text-gray-500">Start by creating your first sale using the form on the left.</p>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* Confirm Sale Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Confirm Sale</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{customerName}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{phone}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold">Total Amount:</span>
                                    <span className="text-xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Amount Paid
                                </label>
                                <input
                                    type="number"
                                    value={amountPaid}
                                    onChange={(e) => setAmountPaid(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="Enter amount paid"
                                    min="0"
                                    max={total}
                                />
                            </div>
                            {amountPaid && (
                                <div className={`border rounded-lg p-4 ${balance > 0 ? 'bg-orange-50 border-orange-200' : 'bg-green-50 border-green-200'}`}>
                                    <div className="flex justify-between items-center">
                                        <span className={`font-medium ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            {balance > 0 ? 'Balance Due:' : 'Fully Paid!'}
                                        </span>
                                        <span className={`text-lg font-bold ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            ₦{Number(balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="flex gap-3 p-6 border-t border-gray-200">
                            <button
                                onClick={() => setShowModal(false)}
                                className="flex-1 bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={confirmSale}
                                className="flex-1 bg-green-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-green-600 transition-colors"
                            >
                                Confirm Sale
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* View Sale Details Modal */}
            {viewModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Sale Details</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{viewModal.customer_name}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Date:</span>
                                    <p className="font-medium">{viewModal.date}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{viewModal.phone}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Gender:</span>
                                    <p className="font-medium">{viewModal.gender || 'N/A'}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="space-y-2">
                                    <div className="flex justify-between">
                                        <span>Total Amount:</span>
                                        <span className="font-semibold">₦{Number(viewModal.total).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Amount Paid:</span>
                                        <span className="text-green-600 font-semibold">₦{Number(viewModal.amount_paid).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Balance:</span>
                                        <span className={`font-semibold ${viewModal.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                            ₦{Number(viewModal.balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            </div>
                            {viewModal.items && viewModal.items.length > 0 && (
                                <div className="border-t pt-4">
                                    <h4 className="font-semibold mb-2">Items Sold:</h4>
                                    <div className="space-y-2 max-h-40 overflow-y-auto">
                                        {viewModal.items.map((item, index) => (
                                            <div key={index} className="flex justify-between text-sm">
                                                <span>{item.product_name || `Product ${item.product}`}</span>
                                                <span>{item.quantity} × ₦{Number(item.price).toLocaleString()}</span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="p-6 border-t border-gray-200">
                            <button
                                onClick={() => setViewModal(null)}
                                className="w-full bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Orders;







import React, { useEffect, useState } from "react";
import axios from "axios";
import { toWords } from "number-to-words";

const Orders = () => {
    const [products, setProducts] = useState([]);
    const [sales, setSales] = useState([]);
    const [selectedId, setSelectedId] = useState("");
    const [cart, setCart] = useState([]);
    const [loading, setLoading] = useState(true);
    const [salesLoading, setSalesLoading] = useState(true);
    const [error, setError] = useState(null);
    const [salesError, setSalesError] = useState(null);
    const [showModal, setShowModal] = useState(false);
    const [viewModal, setViewModal] = useState(null);

    // Customer Info
    const [customerName, setCustomerName] = useState("");
    const [address, setAddress] = useState("");
    const [phone, setPhone] = useState("");
    const [gender, setGender] = useState("");
    const [saleDate, setSaleDate] = useState(new Date().toISOString().slice(0, 10));

    // Payment Info
    const [amountPaid, setAmountPaid] = useState("");
    const [page, setPage] = useState(1);
    const perPage = 10;

    const total = cart.reduce((sum, item) => sum + item.price * item.qty, 0);
    const balance = amountPaid ? Math.max(total - Number(amountPaid), 0) : total;
    const totalInWords = total > 0 ? `${toWords(total)} Naira Only` : "";

    // Fetch products
    useEffect(() => {
        const fetchProducts = async () => {
            try {
                setLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/products/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setProducts(response.data);
            } catch (err) {
                console.error("Error fetching products:", err);
                setError(`Failed to load products. ${err.response?.data?.detail || err.message}`);
            } finally {
                setLoading(false);
            }
        };

        fetchProducts();
    }, []);

    // Fetch sales list
    useEffect(() => {
        const fetchSales = async () => {
            try {
                setSalesLoading(true);
                const token = localStorage.getItem('token');
                const response = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                    headers: {
                        'Authorization': `Token ${token}`
                    }
                });
                setSales(response.data);
            } catch (err) {
                console.error("Error fetching sales:", err);
                setSalesError(`Failed to load sales list. ${err.response?.data?.detail || err.message}`);
            } finally {
                setSalesLoading(false);
            }
        };

        fetchSales();
    }, []);

    // Add to cart
    const handleAdd = () => {
        if (!selectedId) {
            alert("Please select a product first.");
            return;
        }
        const product = products.find((p) => p.id === parseInt(selectedId));
        if (!product) {
            alert("Product not found.");
            return;
        }

        const existing = cart.find((item) => item.id === product.id);
        if (existing) {
            if (existing.qty >= product.quantity) {
                alert(`You cannot add more than ${product.quantity} of ${product.name}`);
                return;
            }
            setCart(
                cart.map((item) =>
                    item.id === product.id ? { ...item, qty: item.qty + 1 } : item
                )
            );
        } else {
            if (product.quantity <= 0) {
                alert(`${product.name} is out of stock.`);
                return;
            }
            setCart([...cart, {
                ...product,
                qty: 1,
                price: product.selling_price || product.price
            }]);
        }
        setSelectedId(""); // Reset selection
    };

    // Change quantity
    const handleQtyChange = (id, newQty) => {
        if (newQty < 1) return;

        setCart(
            cart.map((item) => {
                if (item.id === id) {
                    if (newQty > item.quantity) {
                        alert(`Only ${item.quantity} available for ${item.name}`);
                        return item;
                    }
                    return { ...item, qty: newQty };
                }
                return item;
            })
        );
    };

    // Remove product
    const handleRemove = (id) => setCart(cart.filter((item) => item.id !== id));

    // Submit sale
    const handleSubmit = () => {
        if (!customerName.trim()) {
            alert("Please enter customer name.");
            return;
        }
        if (!phone.trim()) {
            alert("Please enter phone number.");
            return;
        }
        if (cart.length === 0) {
            alert("Cart is empty!");
            return;
        }
        setShowModal(true);
    };

    // Confirm sale
    const confirmSale = async () => {
        try {
            const token = localStorage.getItem('token');
            const saleData = {
                customer_name: customerName,
                address: address || "Not provided",
                phone,
                gender: gender || "Not specified",
                date: saleDate,
                total: parseFloat(total),
                amount_paid: Number(amountPaid) || 0,
                balance: parseFloat(balance),
                items: cart.map((item) => ({
                    product: item.id,
                    quantity: item.qty,
                    price: parseFloat(item.price),
                })),
            };

            console.log("Submitting sale:", saleData);

            const response = await axios.post("http://127.0.0.1:8000/api/sales/sales/", saleData, {
                headers: {
                    'Authorization': `Token ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            alert("Sale recorded successfully!");
            setShowModal(false);
            setCart([]);
            setCustomerName("");
            setAddress("");
            setPhone("");
            setGender("");
            setAmountPaid("");
            setSaleDate(new Date().toISOString().slice(0, 10));

            // Refresh sales list
            const salesResponse = await axios.get("http://127.0.0.1:8000/api/sales/sales/", {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            setSales(salesResponse.data);

        } catch (err) {
            console.error("Sale creation error:", err);
            alert(`Failed to create sale: ${err.response?.data?.detail || err.message || 'Unknown error'}`);
        }
    };

    // Delete sale
    const handleDelete = async (id) => {
        if (!window.confirm("Are you sure you want to delete this sale?")) return;

        try {
            const token = localStorage.getItem('token');
            await axios.delete(`http://127.0.0.1:8000/api/sales/sales/${id}/`, {
                headers: {
                    'Authorization': `Token ${token}`
                }
            });
            alert("Sale deleted successfully!");
            setSales(sales.filter((s) => s.id !== id));
        } catch (err) {
            console.error("Delete error:", err);
            alert(`Failed to delete sale: ${err.response?.data?.detail || err.message}`);
        }
    };

    const totalPages = Math.ceil(sales.length / perPage);
    const currentSales = sales.slice((page - 1) * perPage, page * perPage);

    if (loading) {
        return (
            <div className="p-6 w-full">
                <div className="flex justify-center items-center h-64">
                    <div className="text-lg text-gray-600">Loading products...</div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-6 w-full">
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <div className="flex items-center">
                        <span className="text-red-500 mr-3">⚠️</span>
                        <span className="text-red-700">{error}</span>
                    </div>
                    <button
                        onClick={() => window.location.reload()}
                        className="mt-3 bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors text-sm"
                    >
                        Try Again
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="p-6 w-full">
            {/* Header */}
            <div className="mb-8">
                <h1 className="text-3xl font-bold text-gray-800">Sales Management</h1>
                <p className="text-gray-600 mt-2">Process sales and manage customer orders</p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column - Sales Form */}
                <div className="space-y-6">
                    {/* Customer Details Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Customer Information</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Customer Name *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter customer name"
                                    value={customerName}
                                    onChange={(e) => setCustomerName(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Phone Number *
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter phone number"
                                    value={phone}
                                    onChange={(e) => setPhone(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Address
                                </label>
                                <input
                                    type="text"
                                    placeholder="Enter address"
                                    value={address}
                                    onChange={(e) => setAddress(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Gender
                                </label>
                                <select
                                    value={gender}
                                    onChange={(e) => setGender(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                >
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                            <div className="md:col-span-2">
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Sale Date
                                </label>
                                <input
                                    type="date"
                                    value={saleDate}
                                    onChange={(e) => setSaleDate(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                />
                            </div>
                        </div>
                    </div>

                    {/* Product Selection Card */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                        <h3 className="text-xl font-semibold text-gray-800 mb-4">Add Products</h3>
                        <div className="flex gap-3">
                            <select
                                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                value={selectedId}
                                onChange={(e) => setSelectedId(e.target.value)}
                            >
                                <option value="">Select Product</option>
                                {products.map((product) => (
                                    <option key={product.id} value={product.id}>
                                        {product.name} - ₦{Number(product.selling_price || product.price).toLocaleString()}
                                        (Stock: {product.quantity})
                                    </option>
                                ))}
                            </select>
                            <button
                                onClick={handleAdd}
                                className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-medium"
                            >
                                Add
                            </button>
                        </div>
                    </div>

                    {/* Cart Card */}
                    {cart.length > 0 && (
                        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                            <div className="flex justify-between items-center mb-4">
                                <h3 className="text-xl font-semibold text-gray-800">Shopping Cart</h3>
                                <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                                    {cart.length} items
                                </span>
                            </div>

                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Product
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Price
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Quantity
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Action
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {cart.map((item) => (
                                            <tr key={item.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{item.name}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    ₦{Number(item.price).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex items-center gap-2">
                                                        <input
                                                            type="number"
                                                            min="1"
                                                            max={item.quantity}
                                                            value={item.qty}
                                                            onChange={(e) =>
                                                                handleQtyChange(item.id, parseInt(e.target.value) || 1)
                                                            }
                                                            className="w-20 px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                                        />
                                                        <span className="text-sm text-gray-500">
                                                            of {item.quantity}
                                                        </span>
                                                    </div>
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(item.price * item.qty).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <button
                                                        onClick={() => handleRemove(item.id)}
                                                        className="text-red-600 hover:text-red-800 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-sm"
                                                    >
                                                        Remove
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Cart Summary */}
                            <div className="mt-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold text-gray-800">Total Amount:</span>
                                    <span className="text-2xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                                <div className="text-sm text-gray-600 italic">
                                    {totalInWords}
                                </div>
                                <button
                                    onClick={handleSubmit}
                                    className="w-full mt-4 px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors font-semibold text-lg"
                                >
                                    Process Sale
                                </button>
                            </div>
                        </div>
                    )}
                </div>

                {/* Right Column - Sales History */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div className="flex justify-between items-center mb-6">
                        <h3 className="text-xl font-semibold text-gray-800">Sales History</h3>
                        <span className="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm font-medium">
                            {sales.length} total sales
                        </span>
                    </div>

                    {salesError && (
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                            <div className="flex items-center">
                                <span className="text-red-500 mr-3">⚠️</span>
                                <span className="text-red-700">{salesError}</span>
                            </div>
                        </div>
                    )}

                    {salesLoading ? (
                        <div className="flex justify-center items-center h-32">
                            <div className="text-gray-600">Loading sales history...</div>
                        </div>
                    ) : (
                        <>
                            <div className="overflow-x-auto">
                                <table className="w-full">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Customer
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Date
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Total
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Paid
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Balance
                                            </th>
                                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                                Actions
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody className="divide-y divide-gray-200">
                                        {currentSales.map((sale) => (
                                            <tr key={sale.id} className="hover:bg-gray-50">
                                                <td className="px-4 py-3">
                                                    <div className="font-medium text-gray-900">{sale.customer_name}</div>
                                                    <div className="text-sm text-gray-500">{sale.phone}</div>
                                                </td>
                                                <td className="px-4 py-3 text-gray-900">
                                                    {new Date(sale.date).toLocaleDateString()}
                                                </td>
                                                <td className="px-4 py-3 font-medium text-gray-900">
                                                    ₦{Number(sale.total).toLocaleString()}
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className="text-green-600 font-medium">
                                                        ₦{Number(sale.amount_paid).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <span className={`font-medium ${sale.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                                        ₦{Number(sale.balance).toLocaleString()}
                                                    </span>
                                                </td>
                                                <td className="px-4 py-3">
                                                    <div className="flex space-x-2">
                                                        <button
                                                            onClick={() => setViewModal(sale)}
                                                            className="text-blue-600 hover:text-blue-900 bg-blue-50 hover:bg-blue-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            View
                                                        </button>
                                                        <button
                                                            onClick={() => handleDelete(sale.id)}
                                                            className="text-red-600 hover:text-red-900 bg-red-50 hover:bg-red-100 px-3 py-1 rounded transition-colors text-xs"
                                                        >
                                                            Delete
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>

                            {/* Pagination */}
                            {totalPages > 1 && (
                                <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-200">
                                    <div className="text-sm text-gray-500">
                                        Showing {Math.min(currentSales.length, perPage)} of {sales.length} sales
                                    </div>
                                    <div className="flex gap-2">
                                        <button
                                            disabled={page === 1}
                                            onClick={() => setPage(page - 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Previous
                                        </button>
                                        <span className="px-3 py-1 bg-blue-500 text-white rounded-lg">
                                            {page}
                                        </span>
                                        <button
                                            disabled={page === totalPages}
                                            onClick={() => setPage(page + 1)}
                                            className="px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                        >
                                            Next
                                        </button>
                                    </div>
                                </div>
                            )}

                            {sales.length === 0 && !salesLoading && (
                                <div className="text-center py-8">
                                    <div className="text-4xl mb-4">📊</div>
                                    <h3 className="text-lg font-semibold text-gray-900 mb-2">No Sales Yet</h3>
                                    <p className="text-gray-500">Start by creating your first sale using the form on the left.</p>
                                </div>
                            )}
                        </>
                    )}
                </div>
            </div>

            {/* Confirm Sale Modal */}
            {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Confirm Sale</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{customerName}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{phone}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="flex justify-between items-center mb-2">
                                    <span className="text-lg font-semibold">Total Amount:</span>
                                    <span className="text-xl font-bold text-green-600">
                                        ₦{Number(total).toLocaleString()}
                                    </span>
                                </div>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    Amount Paid
                                </label>
                                <input
                                    type="number"
                                    value={amountPaid}
                                    onChange={(e) => setAmountPaid(e.target.value)}
                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    placeholder="Enter amount paid"
                                    min="0"
                                    max={total}
                                />
                            </div>
                            {amountPaid && (
                                <div className={`border rounded-lg p-4 ${balance > 0 ? 'bg-orange-50 border-orange-200' : 'bg-green-50 border-green-200'}`}>
                                    <div className="flex justify-between items-center">
                                        <span className={`font-medium ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            {balance > 0 ? 'Balance Due:' : 'Fully Paid!'}
                                        </span>
                                        <span className={`text-lg font-bold ${balance > 0 ? 'text-orange-800' : 'text-green-800'}`}>
                                            ₦{Number(balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="flex gap-3 p-6 border-t border-gray-200">
                            <button
                                onClick={() => setShowModal(false)}
                                className="flex-1 bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={confirmSale}
                                className="flex-1 bg-green-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-green-600 transition-colors"
                            >
                                Confirm Sale
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* View Sale Details Modal */}
            {viewModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-xl shadow-lg w-full max-w-md">
                        <div className="p-6 border-b border-gray-200">
                            <h3 className="text-xl font-semibold text-gray-800">Sale Details</h3>
                        </div>
                        <div className="p-6 space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <span className="text-sm text-gray-600">Customer:</span>
                                    <p className="font-medium">{viewModal.customer_name}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Date:</span>
                                    <p className="font-medium">{viewModal.date}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Phone:</span>
                                    <p className="font-medium">{viewModal.phone}</p>
                                </div>
                                <div>
                                    <span className="text-sm text-gray-600">Gender:</span>
                                    <p className="font-medium">{viewModal.gender || 'N/A'}</p>
                                </div>
                            </div>
                            <div className="border-t pt-4">
                                <div className="space-y-2">
                                    <div className="flex justify-between">
                                        <span>Total Amount:</span>
                                        <span className="font-semibold">₦{Number(viewModal.total).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Amount Paid:</span>
                                        <span className="text-green-600 font-semibold">₦{Number(viewModal.amount_paid).toLocaleString()}</span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Balance:</span>
                                        <span className={`font-semibold ${viewModal.balance > 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                                            ₦{Number(viewModal.balance).toLocaleString()}
                                        </span>
                                    </div>
                                </div>
                            </div>
                            {viewModal.items && viewModal.items.length > 0 && (
                                <div className="border-t pt-4">
                                    <h4 className="font-semibold mb-2">Items Sold:</h4>
                                    <div className="space-y-2 max-h-40 overflow-y-auto">
                                        {viewModal.items.map((item, index) => (
                                            <div key={index} className="flex justify-between text-sm">
                                                <span>{item.product_name || `Product ${item.product}`}</span>
                                                <span>{item.quantity} × ₦{Number(item.price).toLocaleString()}</span>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                        <div className="p-6 border-t border-gray-200">
                            <button
                                onClick={() => setViewModal(null)}
                                className="w-full bg-gray-500 text-white font-semibold py-3 px-4 rounded-lg hover:bg-gray-600 transition-colors"
                            >
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Orders;



from django.urls import path
from . import views

urlpatterns = [
    path('sales/', views.sale_list_create, name='sale-list-create'),
    path('saless/<int:pk>/', views.sale_detail, name='sale-detail'),
]
